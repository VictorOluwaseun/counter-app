{"version":3,"sources":["components/counterComponent/navbar.jsx","components/counterComponent/counter.jsx","components/counterComponent/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","totalCounters","className","href","Counter","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDecrement","disabled","value","onDelete","id","classes","Component","Counters","onReset","counters","map","key","App","handleIncrement","state","index","indexOf","setState","handleDecrement","handleReset","c","handelDelete","counterId","filter","console","log","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca98d31c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//Stateless Functional Component\r\n\r\nconst Navbar = ({ totalCounters }) => {\r\n return (\r\n  <nav className=\"navbar navbar-light bg-light\">\r\n   <a className=\"navbar-brand\" href=\"#\">\r\n    Navbar{\" \"}\r\n    <span className=\"badge badge-pill badge-secondary\">{totalCounters}</span>\r\n   </a>\r\n  </nav>\r\n );\r\n};\r\n\r\n// class Navbar extends React.Component {\r\n//  render() {}\r\n// }\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n //  componentDidUpdate(prevProps, prevState) {\r\n //   // this method is called after a component is updated\r\n //   console.log(\"prevProps\", prevProps);\r\n //   console.log(\"prevState\", prevState);\r\n //  }\r\n\r\n //  componentWillUnmount() {\r\n //   console.log(\"Counter - Unmount\");\r\n //  }\r\n //  state = {\r\n //   value: this.props.counter.value\r\n //  };\r\n\r\n //  handleIncrement = () => this.setState({ value: this.state.value + 1 }); //this.state.value++ is equavalent this.state.value = this.state.value+1\r\n\r\n render() {\r\n  return (\r\n   <div className=\"row\">\r\n    <div className=\"col-1\">\r\n     <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n    </div>\r\n    <div className=\"col\">\r\n     <button\r\n      onClick={() => this.props.onIncrement(this.props.counter)}\r\n      className=\"btn btn-secondary btn-sm m-2\"\r\n     >\r\n      +\r\n     </button>\r\n     <button\r\n      onClick={() => this.props.onDecrement(this.props.counter)}\r\n      className=\"btn btn-secondary btn-sm m-2\"\r\n      disabled={this.props.counter.value === 0 ? \"disabled\" : \"\"}\r\n     >\r\n      -\r\n     </button>\r\n     <button\r\n      onClick={() => this.props.onDelete(this.props.counter.id)}\r\n      className=\"btn btn-danger btn-sm\"\r\n     >\r\n      Delete\r\n     </button>\r\n     <br />\r\n    </div>\r\n\r\n    {/* {this.state.tags.length === 0 && \"Please create a new tag!\"}\r\n    {this.renderTag()} */}\r\n   </div>\r\n  );\r\n }\r\n\r\n getBadgeClasses() {\r\n  let classes = \"badge m-2 badge-\";\r\n  classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n  return classes;\r\n }\r\n\r\n formatCount() {\r\n  const { value } = this.props.counter;\r\n  return value === 0 ? \"Zero\" : value;\r\n }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n render() {\r\n  const { onReset, counters, onDelete, onIncrement, onDecrement } = this.props;\r\n\r\n  return (\r\n   <div>\r\n    <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n     Reset\r\n    </button>\r\n    <br />\r\n    {counters.map(counter => (\r\n     <Counter\r\n      key={counter.id}\r\n      onDelete={onDelete}\r\n      onIncrement={onIncrement}\r\n      onDecrement={onDecrement}\r\n      counter={counter}\r\n     />\r\n    ))}\r\n   </div>\r\n  );\r\n }\r\n}\r\n\r\nexport default Counters;\r\n\r\n/*{\r\n /* {a real world example of this is when using dia log boxes}</Counter> */\r\n","import React, { Component } from \"react\";\n// import Vidly from \"./components/vidly/vidly.component\";\nimport Navbar from \"./components/counterComponent/navbar\";\nimport Counters from \"./components/counterComponent/counters\";\nimport \"./App.css\";\n\n//constructor method get called first\n//followed by ComponentDidMount after the component is rendered to the DOM\n\nclass App extends Component {\n constructor() {\n  super();\n  this.state = {\n   counters: [\n    { id: 1, value: 0 },\n    { id: 2, value: 0 },\n    { id: 3, value: 0 },\n    { id: 4, value: 4 }\n   ]\n  };\n  console.log(\"App - Constructor\");\n }\n\n componentDidMount() {\n  console.log(\"App - Mounted\");\n }\n\n handleIncrement = counter => {\n  const counters = [...this.state.counters];\n  // counters[0].value = counters[0].value + 1;\n  // console.log(this.state.counters[0]);\n  const index = counters.indexOf(counter);\n  // counters[index] = { ...counter };\n  counters[index].value++;\n  this.setState({ counters });\n };\n\n handleDecrement = counter => {\n  const counters = [...this.state.counters];\n  // counters[0].value = counters[0].value + 1;\n  // console.log(this.state.counters[0]);\n  const index = counters.indexOf(counter);\n  // counters[index] = { ...counter };\n  counters[index].value--;\n  this.setState({ counters });\n };\n\n handleReset = () => {\n  const counters = this.state.counters.map(c => {\n   c.value = 0;\n   return c;\n  });\n\n  this.setState({ counters });\n };\n\n handelDelete = counterId => {\n  const counters = this.state.counters.filter(c => c.id !== counterId);\n  this.setState({ counters });\n };\n\n render() {\n  console.log(\"App - Rendered\");\n\n  return (\n   <>\n    <Navbar\n     totalCounters={this.state.counters.filter(c => c.value > 0).length}\n    />\n    <main className=\"container\">\n     <Counters\n      counters={this.state.counters}\n      onReset={this.handleReset}\n      onIncrement={this.handleIncrement}\n      onDelete={this.handelDelete}\n      onDecrement={this.handleDecrement}\n     />\n    </main>\n   </>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import Counter from \"./components/counter/counter.component\";\n// import Counters from \"./components/counterComponent/counters\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}